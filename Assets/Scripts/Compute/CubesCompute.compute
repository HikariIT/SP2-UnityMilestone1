#pragma kernel CSMain
#pragma kernel GameOfLife
#pragma kernel RandomRules


RWStructuredBuffer<int> _Alive;
RWStructuredBuffer<int> _PreviousAlive;
RWStructuredBuffer<int> _Rules;

int _CubesPerAxis;
float _Time;
float _StartBeginIndex;
float _StartEndIndex;


float rand(in float2 uv)
{
    return (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453)) * 2 - 1;
}

int indexFromId(uint3 id)
{
    return id.z + _CubesPerAxis * (id.y + _CubesPerAxis * id.x);
}



[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x > _CubesPerAxis - 1 || id.y > _CubesPerAxis - 1 || id.z > _CubesPerAxis - 1)
    {
        return;
    }

    if (id.x < _StartBeginIndex || id.x > _StartEndIndex || id.y < _StartBeginIndex || id.y > _StartEndIndex  || id.z < _StartBeginIndex || id.z > _StartEndIndex ){
        _Alive[indexFromId(id)] = 0;
        return;
    }

    float randValue = rand(float2(id.x * id.z * _Time / 5, id.y * id.z * _Time / 5));


        // Example: Make cubes disappear randomly based on a threshold
    if (randValue < 0)
    {
        _Alive[indexFromId(id)] = 0; // Set to disappear value
    }
    else
    {
        _Alive[indexFromId(id)] = 1; // Set to appear value
    }
}


int getValueFromNeighbor(uint3 id, float2 offset){
    int neighborX = id.x + offset.x;
    int neighborY = id.y + offset.y;

    if (neighborX < 0 || neighborY < 0 || neighborX > _CubesPerAxis - 1 || neighborY > _CubesPerAxis - 1){
        return 0;
    }
    return _PreviousAlive[id.z + _CubesPerAxis * (neighborY + _CubesPerAxis *neighborX)];

}

int getLifeValue(uint3 id){
    // Compute safe indices by clamping
    int up =          getValueFromNeighbor(id, float2(0, 1));
    int down =        getValueFromNeighbor(id, float2(0, -1));
    int right =       getValueFromNeighbor(id, float2(1, 0));
    int left =        getValueFromNeighbor(id, float2(-1, 0));
    int upright =     getValueFromNeighbor(id, float2(1, 1));
    int downright =   getValueFromNeighbor(id, float2(1, -1));
    int upleft =      getValueFromNeighbor(id, float2(-1, 1));
    int downleft =    getValueFromNeighbor(id, float2(-1, -1));

    // Use clamped indices to access texture values
    int sum = up + down + right + left + upright + downright + upleft + downleft;

    int currentVal = _PreviousAlive[indexFromId(id)];
    if(currentVal > 0)
    {
        if(sum >= 2 && sum <= 3)
        {
            currentVal = 1;
        }
        else
        {
            currentVal = 0;
        }
    }
    else
    {
        if(sum == 3)
        {
            currentVal = 1;
        }
        else
        {
            currentVal = 0;
        }
    }
    return currentVal;
}

[numthreads(8,8,8)]
void GameOfLife (uint3 id : SV_DispatchThreadID)
{
    if (id.x > _CubesPerAxis - 1 || id.y > _CubesPerAxis - 1 || id.z > _CubesPerAxis - 1)
    {
        return;
    }

    _PreviousAlive[indexFromId(id)] = _Alive[indexFromId(id)];
    _Alive[indexFromId(id)] = getLifeValue(id);

}

int getValueFromNeighbor3D(uint3 id, float3 offset){
    int neighborX = id.x + offset.x;
    int neighborY = id.y + offset.y;
    int neighborZ = id.z + offset.z;

    if (neighborX < 0 || neighborY < 0 || neighborZ < 0 || neighborX > _CubesPerAxis - 1 || neighborY > _CubesPerAxis - 1 || neighborZ > _CubesPerAxis - 1){
        return 0;
    }
    return _PreviousAlive[neighborZ + _CubesPerAxis * (neighborY + _CubesPerAxis *neighborX)];

}

int getNewCellValue(uint3 id){
    int currentVal = _PreviousAlive[indexFromId(id)];
    int up =          getValueFromNeighbor3D(id, float3(0, 1 , 0));
    int down =        getValueFromNeighbor3D(id, float3(0, -1, 0));
    int right =       getValueFromNeighbor3D(id, float3(1, 0 , 0));
    int left =        getValueFromNeighbor3D(id, float3(-1, 0, 0));
    int front =       getValueFromNeighbor3D(id, float3(0, 0, 1));
    int back =        getValueFromNeighbor3D(id, float3(0, 0, -1));

    int combinedValue = 0;

    combinedValue |= (currentVal & 1) << 0; 
    combinedValue |= (up & 1)   << 1;
    combinedValue |= (down & 1) << 2;
    combinedValue |= (right & 1)<< 3;
    combinedValue |= (left & 1) << 4;
    combinedValue |= (front & 1)<< 5;
    combinedValue |= (back & 1) << 6;

    return _Rules[combinedValue];

}


[numthreads(8,8,8)]
void RandomRules (uint3 id : SV_DispatchThreadID)
{
    if (id.x > _CubesPerAxis - 1 || id.y > _CubesPerAxis - 1 || id.z > _CubesPerAxis - 1)
    {
        return;
    }

    _PreviousAlive[indexFromId(id)] = _Alive[indexFromId(id)];
    _Alive[indexFromId(id)] = getNewCellValue(id);

}
